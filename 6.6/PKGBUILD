pkgbase=linux-handheld
pkgver=6.6.40
pkgrel=1
pkgdesc='Linux Kernel optimized for Handheld Devices.'
url='https://www.kernel.org'
arch=(x86_64)
license=(GPL2)
makedepends=(
  bc
  cpio
  gettext
  libelf
  pahole
  perl
  python
  tar
  xz
)
options=('!strip')
_srcname=linux-$pkgver
_srctag=v$pkgver
source=(
  https://cdn.kernel.org/pub/linux/kernel/v${pkgver%%.*}.x/${_srcname}.tar.{xz,sign}
  # Patches from original `linux-lts`
  # 0001-ZEN-Add-sysctl-and-CONFIG-to-disallow-unprivileged-C.patch
  # 0002-skip-simpledrm-if-nvidia-drm.modeset=1-is.patch
  # 0003-Default-to-maximum-amount-of-ASLR-bits.patch
  # 0005-fix-doc-build.patch

  #
  # linux-fsync patches
  #
  tkg.patch
  fsync.patch
  amdgpu-si-cik-default.patch
  winesync.patch
  tkg-BBRv2.patch
  tkg-bcachefs.patch
  tkg-misc-additions.patch
  tkg-unprivileged-CLONE_NEWUSER.patch
  
  # Preferred Core
  00011_cppc.patch
  00012_cppc.patch
  00013_cppc.patch
  00014_cppc.patch
  00015_cppc.patch
  00016_cppc.patch
  00017_cppc.patch

  # Fast CPPC Option
  # https://www.phoronix.com/news/AMD-Fast-CPPC-Linux-Patches
  0000-cppc-fast.patch

  # Amd seamless boot
  0000-amd-seamless.patch

  # Atomic flips from 6.8
  0000-ioctl-separate-closefb.patch
  0000-atomic-introduce.patch
  0001-atomic-allow.patch
  0002-atomic-refuse.patch
  0003-atomic-cursor-plane.patch
  # Already part of 6.6
  # 0003-atomic-fb-null.patch

  # Allow disabling boost on pstate
  # https://www.phoronix.com/news/AMD-Core-Perf-Boost-Linux
  # https://lore.kernel.org/linux-pm/cover.1706255676.git.perry.yuan@amd.com/
  # Needs to be applied after preferred core
  0001-amd-pstate-boost.patch
  # A test that relies on the removed boost variable fails with this patch
  0002-amd-pstate-boost-fix-tests.patch

  # hdr: https://github.com/CachyOS/kernel-patches
  0001-HDR.patch # hdr from Chimeraos
  # 0001-amd-hdr.patch # hdr from fsync
  0001-add-acpi_call.patch
  uinput.patch

  #
  # Device specific patches
  #
  # linux-surface.patch
  steam-deck.patch
  steam-deck-valve15.patch
  # lenovo-legion-laptop.patch # Not used for the go
  #  workaround for i915 getting stuck during async page flips on Nvidia PRIME systems
  0001-drm-i915-quirks-disable-async-flipping-on-specific-d.patch
  0002-drm-i915-add-kernel-parameter-to-disable-async-page-.patch

  # ROG Ally
  platform-x86-asus-wmi-disable-USB0-hub-on-ROG-Ally-before-suspend.patch
  # IMU (for the air too)
  0001-iio-imu_Add_driver_for_BMI323_IMU.patch
  0002-iio-imu-bmi323-Make-the-local-structures-static.patch
  0003-iio-imu_Add_ROG_ALLY_bmi323-support.patch
  0004-iio-imu-Load_ROG_ALLY_mount_matrix.patch
  0005-iio-imu-ASUS-ROG-ALLY-force-INT1-IRQ.patch
  ROG-ALLY-NCT6775-PLATFORM.patch

  # IMU for bmi160 devices with realtek id
  bmi160_ayaneo.patch
  # IMU for bmi260
  0001-iio-imu-Add-driver-for-Bosch-BMI260-IMU.patch

  # steamdeck oled patches
  # Also relevant for the go
  steamdeck-oled-wifi.patch
  # Part of upstream 6.6 (at least partly)
  # steamdeck-oled-bt.patch
  steamdeck-oled-audio.patch
  steamdeck-oled-hw-quirks.patch
  # Fixes the OLED refresh rate issue
  oled-deck-refresh-rate.patch

  # legion go upstream patches
  # legion-go-display-quirk.patch # part of 6.6.30 (ish)!
  # legion-go-controllers.patch # part of 6.6.19!
  # Legion Go IMU improvement
  0001-amd-sfh-bump-sensitivity.patch

  # Fan patch for most handhelds that use the EC for it
  # https://gitlab.com/Samsagax/oxp-sensors/-/merge_requests/5
  0001-oxp-sensors-dkms-align.patch
  0002-oxp-sensors-other-devices.patch

  # temporary patches
  0001-Remove-REBAR-size-quirk-for-Sapphire-RX-5600-XT-Puls.patch
  mt76:-mt7921:-Disable-powersave-features-by-default.patch
  0001-acpi-proc-idle-skip-dummy-wait.patch
  # Fixes the steam deck not coming back from hibernation
  0001-Revert-nvme-pci-drop-redundant-pci_enable_pcie_error.patch
  # Allows corectl to work out of the box
  0001-Set-amdgpu.ppfeaturemask-0xffffffff-as-default.patch

  # Allow to set custom USB pollrate for specific devices like so:
  # usbcore.interrupt_interval_override=045e:00db:16,1bcf:0005:1
  # useful for setting polling rate of wired PS4/PS5 controller to 1000Hz
  # https://github.com/KarsMulder/Linux-Pollrate-Patch
  # https://gitlab.com/GloriousEggroll/nobara-images/-/issues/64
  0001-Allow-to-set-custom-USB-pollrate-for-specific-device.patch

  # # Also set the PS controller bluetooth polling rate to 1000Hz
  set-ps4-bt-poll-rate-1000hz.patch

  # Allow revoking controllers
  0001-add-revoke_all-ioctl-to-release-event-and-joy-nodes-.patch

  config
  config-handheld
)
validpgpkeys=(
  ABAF11C65A2970B130ABE3C479BE3E4300411886  # Linus Torvalds
  647F28654894E3BD457199BE38DBBDC86092693E  # Greg Kroah-Hartman
)
# https://www.kernel.org/pub/linux/kernel/v6.x/sha256sums.asc
sha256sums=('5c3a3c03c055b8d601a6d7f80d1465ada6b83a12299f6ace2027b47f0baff538'
            'SKIP'
            'a33a2b55fe3ea04ce86c4ccade0afac9825159a95bdc9cfbd1a464030dba3b33'
            '9df628fd530950e37d31da854cb314d536f33c83935adf5c47e71266a55f7004'
            '65dcacafd156b33290f8b43a661b5ab09ed7583e4a1f2c6331b9155497233f60'
            '8a632eb825a059fe28e870952ca39160cd4346e87c0f00494748c378bb4a2a6b'
            '1e368d0290978329562e19cba044794dd0d5e8e8a40a43086ff7fe1aa56afaf4'
            '7db5b4e6383323a8428835a13db38611e78799c93b35b6858ab30bab8855f745'
            '4183cd4cb1031d269eb3f459cdbfc3cd1c4726b5df08c493c41ee1610601f27c'
            '3bc71559122c9c37dc7ca1f08148dd48978dd8d0ccdb1454c20a4308f0aa2e13'
            '9ecea5f36aa9e7a3213626ec38dfd34c499a6945874888f5477275381741ab5e'
            'f423cf1a24252c711608328e462047fe306e809cee912284ecfeae45af3abfaf'
            'ee96f438ede0707eb874de914a3d9aad7060dcb41cbebde981a97018ff4ff23a'
            '39c27e96cec6e882165e542e9d8f365b24826c63dce0fdd7a2b1ed71d7b40042'
            'e941a9cd614455a973d129f8214c7e1c2e994cfc51402377eac9089b10ab4ae7'
            '23bc94b5d24137663820d9c171f9aadc448b731bc765a54f101ea15c9fa21e5e'
            'ad70fc7cf73dd58ff8c6c4266e91781b2ec576d2a25c2985da544dfd9b12ee50'
            'b5bc72eb2d93db0417b1de9e0c7b6391e01f5ea69e8964de91c4f1ef71190e43'
            '25a60f32b4949339561431bbceaa9ae7c92b3975b78ab86b93ab2e0e076b6042'
            '33af30245a8c7fde09545e7055b6a7251bb7a9f18221a18374bdc3dec2afbad4'
            'f495afea4c89d20bf48ef985aeb1c9a4013e57963c854728fd8c369c1d1468b2'
            '3f51da66ee66e6189a637eb266e76e03fe3e2055786d9b836699b80b35132f00'
            '78e68e8599c1dd66ed00361a05f05cab54a4f2feac85fd2ff8989063bb9ec473'
            'fe92488c881243fe75e98e28b337856593ee78a0a2d411b4c70fe2b81088169c'
            '0e440f246e21a860b753466bf5151e1300152a92aac74d3ddb9a5dfbbf9686af'
            '164fd2d20154c9d2bfc6ef92c768e9b4eaa547b5eb257736a4c9b2e0f5e9bcd1'
            'c590b0f2a9039662087ac4c205f17fc3daa51ac8c4bd0a2c3fdccc1b4d97b2b1'
            'ce73a89c7ce523d0009f1f384524587113db3d30f759d751203e68fef237b620'
            '5a3df4533db108a720386236b61f1b73ce157d3f303edc3d0f9e560cd7fd2768'
            'ab145b33869e83ef07012ead518a7eef52ac6c39a740712b0a37bf2dd15cef5a'
            '5152b7cd6ae2d0ad11e567e238bc103a9cd96559715e32238a000b8b43d3f489'
            '5c3ac67f610eb26fb89fdf9704338728603b63771c17143568f7d13bf3f7bade'
            '65f9f99ca97dff0df9232dc1325f01575e2d97f34a33f4e6db3874e80cd3fcb6'
            '4b422549975fdbb10a5f79cea7e448ebd5dc4ad48d76a1a91a3b7b81577c3ba3'
            '708a9899f80db35fb0f06e0144c361eac9a9b2d154cf2fa388a0b4810847e24c'
            '514fd03c17245ed0aaee63e8830c9b02b00efa0307f7e0989065edec6ae185f0'
            'fccdf24b25620dd8271bb3b52ddc53f8882dec26518258dc47e1469fed33e516'
            '5d7104b381925e85f4cdf8ab2017be23b151a3d94ac4321b3aa4cb8d3f611b6c'
            'e1ace3ca52faf0f6a60342bddfa8e22bd37a6bacaa8ad58beda653a049cfc3de'
            'cfcd5c177423df8b7b98b0500fe7ab0757f895ed945c33e205963f0069c7a3be'
            'e2665414d2e6c4ad57bae59e99e88ceb86cb0c144591e5a22f3b9158995344fa'
            '01ef224844fc06193626ec36bcd8614065258020810ee1b9cee6a8cdd27274b2'
            '5a2aa1c97adef776c4c900f74a2bb096738f7736e590adf73803f3766edec74b'
            '34864acac427928c641a90ffeef74da74a89cf00f6fba4560343e1813805d75e'
            'a74d2ae4c7318e1191c63c8c23e1d552812ac7d0cf11359a2da34ac336a5355e'
            '9912955d6d26c8c3780b6656db131e8561ae93bc925582a6b94cc526b233fa18'
            'b8f386f5966c9d891cc69830b9475931055e920ff5fb66ca95f1c3310ae05479'
            'ab137e8ce4b0d71bc75903f44c42d7863501d83ea409a10dfba3091507f422a5'
            'b817ec47000423e0929fb6bc40e7e952938ce527194010f712b7b9078b04dd67'
            '064bd6de567bd5ec7b9b6c5562fb360e247373971a77cd98ff97c4e3356589a8'
            '4c574391fac5f00b10981022321608f2bb655ea15a6ff0ffdcb4f096161683f6'
            'd8bf9fa316fb6a5057f38ebf2ed55c9678b9c1fde52c0b46f72b8e8d8721ec6f'
            'f528e75c615c571a42861eb56c15ede9f6b81c2e64fe017a518282ea18e54c21'
            '38db1ffbacc2315df6ec862404e0dfe73360f950c75336a960b9da382b2a8e7d'
            '2ce395a990bd260c71f542faa91bf4f4480321f3db4035b49fddc10a73a7a5ae'
            '98a2a5d772b1e9a4eefea4807179fb277c9fca7858af2318e424567a7a9f5910'
            'ed0b9b23ffd0d13bb3bac29ed2f8e0f45655532c6afe7bf1aa477915e54eb632'
            '6d02772dfbc7805812be3082f0c0052fbbc0f317d71cc3f34692440641a2b9f0'
            '78c7033561e47690712692d01cdd3a52359bcad88c5f1df601118b515b1f3075')

export KBUILD_BUILD_HOST=archlinux
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

prepare() {
  cd $_srcname

  echo "Setting version..."
  echo "-$pkgrel" > localversion.10-pkgrel
  echo "${pkgbase#linux}" > localversion.20-pkgname

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    src="${src%.zst}"
    [[ $src = *.patch ]] || continue
    echo "----- Applying patch ./$src"
    # Allow going to reject path through vs code terminal
    patch -Np1 < "../$src" | sed -e "s/saving rejects to file /saving rejects to file ${PWD//\//\\/}\//g"
    if [ ${PIPESTATUS[0]} -ne 0 ]; then
      exit ${PIPESTATUS[0]}
    fi
  done

  if [ -f "../../../.config" ]; then
    echo "############################################"
    echo "USING CUSTOMIZED CONFIG. DO NOT UPLOAD."
    echo "############################################"
    cp ../../../.config .config
    make olddefconfig
    diff -u ../../../.config .config || :
  else
    echo "Setting config..."
    cp ../config .config
    scripts/kconfig/merge_config.sh -m ../config ../config-handheld
    make olddefconfig
    diff -u ../config .config || :
  fi

  make -s kernelrelease > version
  echo "Prepared $pkgbase version $(<version)"
}

build() {
  cd $_srcname
  make all
  # make htmldocs
}

_package() {
  pkgdesc="The $pkgdesc kernel and modules"
  depends=(
    coreutils
    initramfs
    kmod
  )
  optdepends=(
    'wireless-regdb: to set the correct wireless channels of your country'
    'linux-firmware: firmware images needed for some devices'
  )
  provides=(
    KSMBD-MODULE
    VIRTUALBOX-GUEST-MODULES
    WIREGUARD-MODULE
  )
  replaces=(
    wireguard-lts
  )

  cd $_srcname
  local modulesdir="$pkgdir/usr/lib/modules/$(<version)"

  echo "Installing boot image..."
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  echo "Installing modules..."
  ZSTD_CLEVEL=19 make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
    DEPMOD=/doesnt/exist modules_install  # Suppress depmod

  # remove build link
  rm "$modulesdir"/build
}

_package-headers() {
  pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"
  depends=(pahole)

  cd $_srcname
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts

  # required when STACK_VALIDATION is enabled
  install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # required when DEBUG_INFO_BTF_MODULES is enabled
  install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  # echo "Removing documentation..."
  # rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -Sib "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  echo "Stripping vmlinux..."
  strip -v $STRIP_STATIC "$builddir/vmlinux"

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=(
  "$pkgbase"
  "$pkgbase-headers"
)
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done

# vim:set ts=8 sts=2 sw=2 et:
