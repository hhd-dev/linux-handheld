From c6bb9aa6bbca07262c07b3501a9409f67a7dd7f8 Mon Sep 17 00:00:00 2001
From: antheas <git@antheas.dev>
Date: Fri, 19 Jul 2024 01:21:44 +0300
Subject: [PATCH v2 2/2] add revokeall ioctl to joydevs

---
 drivers/input/joydev.c        | 58 +++++++++++++++++++++++++++++------
 include/uapi/linux/joystick.h |  4 +++
 2 files changed, 52 insertions(+), 10 deletions(-)

diff --git a/drivers/input/joydev.c b/drivers/input/joydev.c
index 5824bca02..e2447ec11 100644
--- a/drivers/input/joydev.c
+++ b/drivers/input/joydev.c
@@ -63,8 +63,29 @@ struct joydev_client {
 	struct fasync_struct *fasync;
 	struct joydev *joydev;
 	struct list_head node;
+	bool revoked;
 };
 
+static int joydev_revoke(struct joydev *joydev, struct joydev_client *client)
+{
+	client->revoked = true;
+	wake_up_interruptible(&joydev->wait);
+	return 0;
+}
+
+static int joydev_revoke_all(struct joydev *joydev)
+{
+	struct joydev_client *client;
+
+	spin_lock(&joydev->client_lock);
+	list_for_each_entry(client, &joydev->client_list, node) {
+		client->revoked = true;
+	}
+	spin_unlock(&joydev->client_lock);
+	wake_up_interruptible(&joydev->wait);
+	return 0;
+}
+
 static int joydev_correct(int value, struct js_corr *corr)
 {
 	switch (corr->type) {
@@ -89,6 +110,9 @@ static void joydev_pass_event(struct joydev_client *client,
 			      struct js_event *event)
 {
 	struct joydev *joydev = client->joydev;
+	
+	if (client->revoked)
+		return;
 
 	/*
 	 * IRQs already disabled, just acquire the lock
@@ -389,7 +413,7 @@ static ssize_t joydev_read(struct file *file, char __user *buf,
 	struct js_event event;
 	int retval;
 
-	if (!joydev->exist)
+	if (!joydev->exist || client->revoked)
 		return -ENODEV;
 
 	if (count < sizeof(struct js_event))
@@ -402,11 +426,11 @@ static ssize_t joydev_read(struct file *file, char __user *buf,
 		return -EAGAIN;
 
 	retval = wait_event_interruptible(joydev->wait,
-			!joydev->exist || joydev_data_pending(client));
+			!joydev->exist || client->revoked || joydev_data_pending(client));
 	if (retval)
 		return retval;
 
-	if (!joydev->exist)
+	if (!joydev->exist || client->revoked)
 		return -ENODEV;
 
 	while (retval + sizeof(struct js_event) <= count &&
@@ -438,7 +462,7 @@ static __poll_t joydev_poll(struct file *file, poll_table *wait)
 
 	poll_wait(file, &joydev->wait, wait);
 	return (joydev_data_pending(client) ? (EPOLLIN | EPOLLRDNORM) : 0) |
-		(joydev->exist ?  0 : (EPOLLHUP | EPOLLERR));
+		(joydev->exist && !client->revoked ?  0 : (EPOLLHUP | EPOLLERR));
 }
 
 static int joydev_handle_JSIOCSAXMAP(struct joydev *joydev,
@@ -507,8 +531,8 @@ static int joydev_handle_JSIOCSBTNMAP(struct joydev *joydev,
 }
 
 
-static int joydev_ioctl_common(struct joydev *joydev,
-				unsigned int cmd, void __user *argp)
+static int joydev_ioctl_common(struct joydev *joydev, struct joydev_client *client, 
+					unsigned int cmd, void __user *argp)
 {
 	struct input_dev *dev = joydev->handle.dev;
 	size_t len;
@@ -556,6 +580,20 @@ static int joydev_ioctl_common(struct joydev *joydev,
 		return copy_to_user(argp, joydev->corr,
 			sizeof(joydev->corr[0]) * joydev->nabs) ? -EFAULT : 0;
 
+	case JSIOCREVOKE:
+		if (argp)
+			return -EINVAL;
+		else
+			return joydev_revoke(joydev, client);
+
+	case JSIOCREVOKEALL:
+		if (!capable(CAP_SYS_ADMIN))
+			return -EACCES;
+
+		if (argp)
+			return -EINVAL;
+		else
+			return joydev_revoke_all(joydev);
 	}
 
 	/*
@@ -606,7 +644,7 @@ static long joydev_compat_ioctl(struct file *file,
 	if (retval)
 		return retval;
 
-	if (!joydev->exist) {
+	if (!joydev->exist || client->revoked) {
 		retval = -ENODEV;
 		goto out;
 	}
@@ -649,7 +687,7 @@ static long joydev_compat_ioctl(struct file *file,
 		break;
 
 	default:
-		retval = joydev_ioctl_common(joydev, cmd, argp);
+		retval = joydev_ioctl_common(joydev, client, cmd, argp);
 		break;
 	}
 
@@ -671,7 +709,7 @@ static long joydev_ioctl(struct file *file,
 	if (retval)
 		return retval;
 
-	if (!joydev->exist) {
+	if (!joydev->exist || client->revoked) {
 		retval = -ENODEV;
 		goto out;
 	}
@@ -699,7 +737,7 @@ static long joydev_ioctl(struct file *file,
 		break;
 
 	default:
-		retval = joydev_ioctl_common(joydev, cmd, argp);
+		retval = joydev_ioctl_common(joydev, client, cmd, argp);
 		break;
 	}
  out:
diff --git a/include/uapi/linux/joystick.h b/include/uapi/linux/joystick.h
index 192bf2cf1..543b00480 100644
--- a/include/uapi/linux/joystick.h
+++ b/include/uapi/linux/joystick.h
@@ -66,6 +66,10 @@ struct js_event {
 #define JSIOCSBTNMAP		_IOW('j', 0x33, __u16[KEY_MAX - BTN_MISC + 1])	/* set button mapping */
 #define JSIOCGBTNMAP		_IOR('j', 0x34, __u16[KEY_MAX - BTN_MISC + 1])	/* get button mapping */
 
+#define JSIOCREVOKE		_IOW('j', 0x91, int)			/* Revoke device access */
+#define JSIOCREVOKEALL	_IOW('j', 0x94, int)			/* Revoke device access from all clients. Requires CAP_SYS_ADMIN. */
+
+
 /*
  * Types and constants for get/set correction
  */
-- 
2.45.2

